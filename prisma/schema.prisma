generator client {
  provider      = "prisma-client-js"
  output        = "../node_modules/.prisma/client"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Ticket {
  id          Int      @id @default(autoincrement())  @map("_id")
  title       String   @db.VarChar(300)
  description String   @db.Text
  status      Status   @default(open)
  date        DateTime @default(now())
  updatedTime DateTime @updatedAt
  label       Label    @default(documentation)
  priority    Priority @default(low)
  assignee    String?  @db.VarChar(300)
  email       String
}

enum Status {
  backlog
  todo
  in_progress
  done
  canceled
  open
}

enum Label {
  documentation
  bug
  feature
}

enum Priority {
  low
  medium
  high
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid()) @map("_id")
  name          String?
  password      String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
